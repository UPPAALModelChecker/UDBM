---
name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Formatting
        run: find src include test -iregex '.*\.\(c\|h\|cpp\|hpp\|cc\|hh\|cxx\|hxx\)$' | xargs clang-format -n -Werror
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-w64-mingw32, x86_64-linux]
        sanitizers: [ON, OFF]
        newdbm: [ON, OFF]
        exclude:
          - target: x86_64-w64-mingw32
            sanitizers: ON
    runs-on: ubuntu-latest
    env:
      CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/cmake/toolchain/${{ matrix.target }}.cmake
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/local/${{ matrix.target }}
      CMAKE_BUILD_TYPE: Release
      CTEST_OUTPUT_ON_FAILURE: 1
      STATIC: OFF
    steps:
      - uses: actions/checkout@v2
      - name: Install MinGW64 cross-compiler and wine
        if: matrix.target == 'x86_64-w64-mingw32'
        run: |
          sudo apt-get -qqy update
          sudo apt-get -qqy install cmake make g++-mingw-w64-x86-64 mingw-w64-x86-64-dev mingw-w64-tools wine wine-binfmt
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
          WINEPATH=$($PWD/winepath-for ${{ matrix.target }})
          echo "WINEPATH=$WINEPATH" >> $GITHUB_ENV
          echo "WINARCH=win64" >> $GITHUB_ENV
      - name: Getlibs
        run: ./getlibs.sh ${{ matrix.target }}
      - name: Build and test
        run: |
          echo "  CMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE"
          echo "  CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH"
          echo "  CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE"
          cmake -S . -B build -DUDBM_WITH_TESTS=ON -DUDBM_STATIC=$STATIC -DASAN=${{ matrix.sanitizers }} -DUBSAN=${{ matrix.sanitizers }} -DENABLE_DBM_NEW=${{ matrix.newdbm }}
          cmake --build build --config $CMAKE_BUILD_TYPE
          (cd build ; ctest -C $CMAKE_BUILD_TYPE)
  build-windows:
    runs-on: windows-latest
    env:
      CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/local/x86_64-w64-mingw32
      CMAKE_BUILD_TYPE: Release
      STATIC: ON
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v2
      - name: Get dependencies
        run: |
          vcpkg integrate install
          vcpkg install doctest --triplet x64-windows
          bash ./getlibs.sh x86_64-w64-mingw32
      - name: Build and test
        run: |
          cmake -S . -B build -DUDBM_WITH_TESTS=ON
          cmake --build build --config %CMAKE_BUILD_TYPE%
          (cd build ; ctest -C %CMAKE_BUILD_TYPE%)
  build-macos:
    runs-on: macos-latest
    env:
      CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/cmake/toolchain/x86_64-darwin.cmake
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/local/x86_64-darwin
      CMAKE_BUILD_TYPE: Release
      STATIC: ON
      CTEST_OUTPUT_ON_FAILURE: 1
    strategy:
      fail-fast: false
      matrix:
        sanitizers: [ON, OFF]
    steps:
      - uses: actions/checkout@v2
      - name: Get dependencies
        run: ./getlibs.sh x86_64-darwin
      - name: Build and test
        run: |
          echo "  CMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE"
          echo "  CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH"
          echo "  CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE"
          cmake -S . -B build -DUDBM_WITH_TESTS=ON -DASAN=${{ matrix.sanitizers }} -DUBSAN=${{ matrix.sanitizers }}
          cmake --build build --config $CMAKE_BUILD_TYPE
          (cd build ; ctest -C $CMAKE_BUILD_TYPE)
